import pyfits from astropy.io import fitsfrom scipy import ndimagefrom scipy.io.idl import readsavfrom scipy.optimize import curve_fitimport numpy as npfrom time import clockimport globimport pandas as pdfrom matplotlib import rcParamsrcParams.update({'figure.autolayout': True})from numpy import pifrom numpy.ma import medianfrom matplotlib import pyplot as pltimport os.pathimport sysimport pdbimport pylabpylab.ion()#open the filehdulist = fits.open('RESOLVE_SDSS_raw.fits')#extract the datahdu_data = hdulist[1].data#extract the headerhdu_headers = hdulist[1].header#separate the data columnsgalname = hdu_data.field(0)h_alpha_flux = hdu_data.field(25)h_alpha_flux_err = hdu_data.field(26)nii_6584_flux = hdu_data.field(27)nii_6584_flux_err = hdu_data.field(28)#RESOLVE data#open the filehdulist_R = fits.open('merged_bztre.fits')#extract the datahdu_data_R = hdulist_R[1].data#extract the headerhdu_headers_r = hdulist_R[1].header#separate the data columnsgalname_R = hdu_data_R.field(0)N2_R = hdu_data_R.field(10)N2_R_err = hdu_data_R.field(11)HA_R = hdu_data_R.field(30)HA_R_err = hdu_data_R.field(31)N2_6586_R = hdu_data_R.field(32)N2_6586_R_err = hdu_data_R.field(33)#centralN2_R_cen = N2_R[:,10]N2_R_err_cen = N2_R_err[:,10]HA_R_cen = HA_R[:,10]HA_R_err_cen = HA_R_err[:,10]N2_6586_R_cen = N2_6586_R[:,10]N2_6586_R_err_cen = N2_6586_R_err[:,10]gals_arr = np.array(galname_R)h_alpha_flux_sel = np.zeros(len(gals_arr))nii_6584_flux_sel = np.zeros(len(gals_arr))h_alpha_flux_err_sel = np.zeros(len(gals_arr))nii_6584_flux_err_sel = np.zeros(len(gals_arr))for i in np.arange(len(gals_arr)):    if gals_arr[i] in galname:        sel_gal = galname_R[i]        h_alpha_flux_sel[i] = float(h_alpha_flux[(np.where(galname == sel_gal))])        h_alpha_flux_err_sel[i] = float(h_alpha_flux_err[(np.where(galname == sel_gal))])        nii_6584_flux_sel[i] = float(nii_6584_flux[(np.where(galname == sel_gal))])        nii_6584_flux_err_sel[i] = float(nii_6584_flux_err[(np.where(galname == sel_gal))])plt.figure(1)plt.clf()index = np.arange(len(galname_R))plt.scatter(index,(N2_6586_R_cen/HA_R_cen), color = 'g')plt.scatter(index,(nii_6584_flux_sel/h_alpha_flux_sel), color = 'r')plt.scatter(index, N2_R_cen, marker = '+', label = 'Erik RESOLVE')plt.xticks(index)plt.ylabel('(NII 6586 / Halpha')plt.legend()plt.ylim(-5,5)plt.show()sel = (np.isnan(nii_6584_flux_sel/h_alpha_flux_sel) == False)plt.figure(2)plt.clf()plt.scatter((nii_6584_flux_sel/h_alpha_flux_sel), (N2_6586_R_cen/HA_R_cen))plt.xlabel('SDSS N2/Halpha')plt.ylabel('RESOLVE N2/Halpha')plt.legend()plt.show()sel = np.where(h_alpha_flux_sel != 0)#RESOLVE multipled by median of ratio of sloan to resolve halphaplt.figure(3)plt.clf()plt.scatter(N2_6586_R_cen[sel]*0.17,nii_6584_flux_sel[sel], color= 'r', label = 'N2')plt.scatter(HA_R_cen[sel]*0.17,h_alpha_flux_sel[sel], color='g', label = 'halpha')plt.plot(np.arange(10000), np.arange(10000))#plot labels to gals#rf0006 has negative N2 therefore isn't shown on plotplt.text(2.50848794e+00, 1.00111069e+02, 'rf0006 HA', fontsize =10, alpha = 5.0)#rf0023plt.text(34.8, 1.35924883e+01, 'rf0023 N2', fontsize =10, alpha = 5.0)plt.text(2.33577469e+02, 1.17664154e+02, 'rf0023 HA', fontsize =10, alpha = 5.0)#rf0024plt.text(-5.14214706, 3.89656639e+01, 'rf0024 N2')plt.text(1.30606413e+01, 1.13210716e+02, 'rf0024 HA')plt.xlabel('RESOLVE')plt.ylabel('SDSS')plt.xlim(-100,1000)plt.ylim(-100,1000)plt.legend()plt.show()plt.figure(4)plt.clf()plt.scatter(HA_R_cen[sel],N2_6586_R_cen[sel], color = 'r', label='RESOLVE')plt.scatter(h_alpha_flux_sel[sel],nii_6584_flux_sel[sel], color = 'g', label='SDSS')plt.xlabel('halpha')plt.ylabel('N2')plt.legend()plt.show()